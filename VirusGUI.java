/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @Author Jordi de Bruin
 * @Made  04-02-2018
 * @Function Deze applicatie kan het .tsv bestand inlezen waarin virusdata staat.
 *           De gebruiker kan twee hosts selecteren, en de afzonderlijke en gemeenschappelijke
 *           viruslijsten met virussen die deze hosts kunnen infecteren, worden getoond.
*/
package tentamen2018;

 /** 
 * Alle imports worden hier gedaan:
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/**
 *
 * @author Jordii
 */
public class VirusGUI extends javax.swing.JFrame {

    /**
     * Het aanmaken van een hashmap en een lijst waarin later data wordt opgeslagen.
     */
    
    public static HashMap<String, ArrayList<Integer>> VirusMap = new HashMap<>();
    public static ArrayList<String> VirusIDList;
    
    /**
     * De GUI wordt gemaakt.
     */   
    
    public VirusGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SorterenOp = new javax.swing.ButtonGroup();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList<>();
        FileTextfield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ClassificationDropdown = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        Hostid2Dropdown = new javax.swing.JComboBox<>();
        Hostid1Dropdown = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        RadioID = new javax.swing.JRadioButton();
        RadioClassificatie = new javax.swing.JRadioButton();
        RadioHosts = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        VirusLijst1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        VirusLijst2 = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        OvereenkomstLijst = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        ShowButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        jList3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "None", "none", "none" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList3);

        jList4.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "None", "none", "none" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jList4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        FileTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileTextfieldActionPerformed(evt);
            }
        });

        jLabel1.setText("File of URL");

        ClassificationDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "none", "none", "none" }));

        jLabel2.setText("Viral Classification:");

        Hostid2Dropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));

        Hostid1Dropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));

        jLabel3.setText("Host ID 1:");

        jLabel4.setText("Host ID 2:");

        SorterenOp.add(RadioID);
        RadioID.setText("ID");
        RadioID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioIDActionPerformed(evt);
            }
        });

        SorterenOp.add(RadioClassificatie);
        RadioClassificatie.setText("Classificatie");
        RadioClassificatie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioClassificatieActionPerformed(evt);
            }
        });

        SorterenOp.add(RadioHosts);
        RadioHosts.setText("Aantal hosts");
        RadioHosts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioHostsActionPerformed(evt);
            }
        });

        jLabel5.setText("Sortering:");

        VirusLijst1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "None", "none", "none" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(VirusLijst1);

        VirusLijst2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "None", "none", "none" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(VirusLijst2);

        OvereenkomstLijst.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "None", "none", "none" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(OvereenkomstLijst);

        jLabel6.setText("Viruslijst 1:");

        jLabel7.setText("Viruslijst2:");

        jLabel8.setText("Overeenkomsten:");

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ShowButton.setText("Show!");
        ShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(44, 44, 44)
                                .addComponent(RadioID)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                .addComponent(Hostid1Dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Hostid2Dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(RadioClassificatie)
                        .addGap(18, 18, 18)
                        .addComponent(RadioHosts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ShowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(19, 19, 19))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FileTextfield, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchButton))
                            .addComponent(ClassificationDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(94, 94, 94)
                                .addComponent(jLabel7)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(SearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClassificationDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hostid2Dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(Hostid1Dropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(RadioID)
                    .addComponent(RadioClassificatie)
                    .addComponent(RadioHosts)
                    .addComponent(ShowButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FileTextfieldActionPerformed

    private void RadioIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioIDActionPerformed

    private void RadioClassificatieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioClassificatieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioClassificatieActionPerformed

    private void RadioHostsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioHostsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RadioHostsActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        JFileChooser chooser = new JFileChooser();                          
        chooser.showOpenDialog(null);                                       
        File f  = chooser.getSelectedFile();             // Gekozen bestand wordt opgeslagen.
        String filename = f.getAbsolutePath();           // Bestandsnaam wordt verkregen.
        FileTextfield.setText(filename);                 // Bestandnaam wordt ingevuld in het tekstvak.
        int count = 0;                                                      
     
    // Het bestand wordt gelezen, als het bestand niet wordt gevonden of het bestand corrupt is, wordt dit afgevangen met een exception.    
        
        try {    
            BufferedReader br = new BufferedReader(new FileReader(f));   // De inhoud van het bestand wordt gelezen.
            String regel;               // Aanmaken van variabelen waarin data wordt opgeslagen.                                     
            String host;
            int VirusID;
            String soort;
            String classificatie;            
            int hostID;
            ArrayList<String> ClassificatieList = new ArrayList<>(); 
            
            
                while ((regel = br.readLine()) != null){                            // Regels worden gelezen zolang er data in staat.
                    count++;                                        
                    if (count > 1) {                                                // De eerste regel met kolomnamen wordt niet meegenomen.
      
                    ArrayList<Integer> hostList = new ArrayList<>();
                    String[] VirusRegel = regel.split("\\t", -1);
                    if (!"".equals(VirusRegel[7]) && !"".equals(VirusRegel[0]) && !"".equals(VirusRegel[1]) && !"".equals(VirusRegel[8]) && !"".equals(VirusRegel[2])) {
                            host = VirusRegel[7] + " (" + VirusRegel[8] + ")";
                            hostID = Integer.parseInt(VirusRegel[7]);
                            hostList.add(hostID);
                            VirusID = Integer.parseInt(VirusRegel[0]);
                            soort = VirusRegel[1];
                            classificatie = VirusRegel[2];
                            String[] VirusClassificatie = VirusRegel[2].split(";");
                        
                            // Object virus wordt aangemaakt, en de bijbehorende waardes worden opgeslagen.
                            Virus v = new Virus(VirusID, soort, hostList, classificatie);   
                            
                            if (VirusMap.containsKey(host)){
                                ArrayList CurrentList = VirusMap.get(host);
                                CurrentList.add(VirusID);
                            }
                            if (!VirusMap.containsKey(host)){
                                ArrayList<Integer> VirusIDList = new ArrayList<>();
                                VirusIDList.add(VirusID);
                                VirusMap.put(host, VirusIDList);
                            }
                        
                            // Het virus krijgt één van de classificaties mee.
                            if (VirusClassificatie[1].contains("ssDNA viruses")){
                                classificatie = "ssDNA";
                            }
                            else if (VirusClassificatie[1].contains("dsDNA viruses")){
                                classificatie = "dsDNA";
                            }                        
                            else if (VirusClassificatie[1].contains("ssRNA viruses")){
                                classificatie = "ssRNA";
                            }                        
                            else if (VirusClassificatie[1].contains("dsRNA viruses")){
                                classificatie = "dsRNA";
                            }  
                            else if (VirusClassificatie[1].contains("Retro-transcribing viruses")){
                                classificatie = "Retrovirus";                            
                            } 
                            else if (VirusClassificatie[1].contains("Satellites") || VirusClassificatie[1].contains("virophages")){
                                classificatie = "Satellite virus and Virophage";                        
                            }
                            else if (VirusClassificatie[0].contains("Viroids")){
                                classificatie = "Viroid";
                            }
                            else {
                                classificatie = "Other";
                            }
                        
                            // Er wordt een lijst gemaakt waarin de verschillende classificaties worden opgeslagen.
                            if (!ClassificatieList.contains(classificatie)){
                                ClassificatieList.add(classificatie);
                            }                
                        
                            // De classificaties worden in de bijbehorende combobox gestopt.
                            ClassificationDropdown.removeAllItems();
                            ClassificationDropdown.addItem("None");
                            ClassificatieList.stream().forEach((categorie) -> {
                                ClassificationDropdown.addItem(categorie);
                        });
                        }
                    }
            {
            
           Hostid1Dropdown.removeAllItems();
           Hostid2Dropdown.removeAllItems();
           
                        // De hosts worden aan de bijbehorende dropdown menu's toegevoegd.
                        VirusMap.entrySet().stream().map((entry) -> entry.getKey()).map((key) -> {
                            Hostid1Dropdown.addItem(key);
                            return key;
                        }).forEach((key) -> {
                            Hostid2Dropdown.addItem(key);           
                        });
                    }                
                }                
           // Exceptions als het bestand niet wordt gevonden of als het bestand corrupt is. 
        } catch (FileNotFoundException e) { 
            System.out.println("Het bestand is niet gevonden.");
        } catch (IOException e) {
            System.out.println("Er is iets mis gegaan bij het lezen van het bestand.");
 
       
        }        

    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowButtonActionPerformed
        final DefaultListModel model = new DefaultListModel();
        final DefaultListModel model2 = new DefaultListModel();
        final DefaultListModel overeenkomstmodel = new DefaultListModel();
        ArrayList<Integer> overeenkomsten = new ArrayList<>();
        
        String selected1 = (String) Hostid1Dropdown.getSelectedItem();
        String selected2 = (String) Hostid2Dropdown.getSelectedItem();
        
        ArrayList<Integer> selectedValues1 = VirusMap.get(selected1);
        Collections.sort(selectedValues1);
        ArrayList<Integer> selectedValues2 = VirusMap.get(selected2);
        Collections.sort(selectedValues2);
        
        selectedValues1.stream().forEach((itemsList1) -> {
            model.addElement(itemsList1);
        });
        
        selectedValues2.stream().forEach((itemsList2) -> {
            model2.addElement(itemsList2);
        });
        
        selectedValues1.stream().filter((itemsList1) -> (selectedValues2.contains(itemsList1))).map((itemsList1) -> {
            overeenkomsten.add(itemsList1);                // IDs worden gesorteerd
            return itemsList1;
        }).map((itemsList1) -> {
            overeenkomstmodel.addElement(itemsList1);
            return itemsList1;
        }).forEach((_item) -> {
            Collections.sort(overeenkomsten);              // IDs worden gesorteerd
        });

        
        VirusLijst1.setModel(model);
        VirusLijst2.setModel(model2);
        OvereenkomstLijst.setModel(overeenkomstmodel);

        
    }//GEN-LAST:event_ShowButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VirusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            System.out.println("Er is iets mis gegaan.");
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VirusGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ClassificationDropdown;
    private javax.swing.JTextField FileTextfield;
    private javax.swing.JComboBox<String> Hostid1Dropdown;
    private javax.swing.JComboBox<String> Hostid2Dropdown;
    private javax.swing.JList<String> OvereenkomstLijst;
    private javax.swing.JRadioButton RadioClassificatie;
    private javax.swing.JRadioButton RadioHosts;
    private javax.swing.JRadioButton RadioID;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton ShowButton;
    private javax.swing.ButtonGroup SorterenOp;
    private javax.swing.JList<String> VirusLijst1;
    private javax.swing.JList<String> VirusLijst2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
